########################################
## Raw
########################################
Ivoz\Provider\Domain\Model\BillableCall\BillableCall:
  itemOperations:
    get: ~
    put_billable_call_rate_by_callid:
      method: 'PUT'
      depth: 0
      path: '/billable_calls/{callid}/rate'
      route_name: 'put_billable_call_rate_by_callid'
      swagger_context:
        consumes:
        - 'application/json'
        produces:
        - 'application/json'
        tags:
        - Provider
        parameters:
        - name: callid
          in: path
          type: string
          required: true
          description: 'callid'
        - name: rating
          in: body
          required: true
          description: The rating values
          schema:
            $ref: "#/definitions/BillableCall-rating"
  collectionOperations:
    get:
      swagger_context:
        produces:
        - 'application/json'
        - 'application/ld+json'
        - 'text/csv'
  attributes:
    pagination_client_enabled: true
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      startTime: DESC

Ivoz\Provider\Domain\Model\Ddi\Ddi:
  itemOperations: []
  collectionOperations: []
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'

Ivoz\Provider\Domain\Model\DdiProvider\DdiProvider:
  itemOperations: []
  collectionOperations: []
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name: ASC

Ivoz\Provider\Domain\Model\BannedAddress\BannedAddress:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      ip: ASC
    read_access_control:
      ROLE_SUPER_ADMIN:
        brand:
          isNull: ~
    write_access_control:
      ROLE_SUPER_ADMIN:
        raw: "FALSE"

Ivoz\Provider\Domain\Model\Brand\Brand:
  itemOperations:
    get:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\Brand\BrandDto::CONTEXT_DETAILED
    put:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\Brand\BrandDto::CONTEXT_DETAILED
    delete: ~
  collectionOperations:
    get: ~
    post:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\Brand\BrandDto::CONTEXT_DETAILED
      depth: 1
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name: ASC
    normalization_context:
      groups: [
        !php/const Ivoz\Provider\Domain\Model\Brand\BrandDto::CONTEXT_DETAILED
      ]

Ivoz\Provider\Domain\Model\Brand\Invoice:
Ivoz\Provider\Domain\Model\Brand\Logo:
Ivoz\Provider\Domain\Model\Administrator\Administrator:
  itemOperations:
    get: ~
    put: ~
    delete: ~
    post_provider_administrator_grant_read_only:
      method: 'POST'
      path: '/administrators/{id}/grant_read_only'
      route_name: 'post_provider_administrator_grant_read_only'
      requirements:
        id: '\d+'
      pagination_enabled: false
      swagger_context:
        produces:
          - 'application/json'
        tags:
          - Provider
        parameters:
          - name: publicEntitiesRelUsers
            in: body
            required: true
            schema:
              type: array
              items:
                type: integer
            description: The relation values.
    post_provider_administrator_grant_all:
      method: 'POST'
      path: '/administrators/{id}/grant_all'
      route_name: 'post_provider_administrator_grant_all'
      requirements:
        id: '\d+'
      pagination_enabled: false
      swagger_context:
        produces:
          - 'application/json'
        tags:
          - Provider
        parameters:
          - name: publicEntitiesRelUsers
            in: body
            required: true
            schema:
              type: array
              items:
                type: integer
            description: The relation values.
    post_provider_administrator_revoke_all:
      method: 'POST'
      path: '/administrators/{id}/revoke_all'
      route_name: 'post_provider_administrator_revoke_all'
      requirements:
        id: '\d+'
      pagination_enabled: false
      swagger_context:
        produces:
          - 'application/json'
        tags:
          - Provider
        parameters:
          - name: publicEntitiesRelUsers
            in: body
            required: true
            schema:
              type: array
              items:
                type: integer
            description: The relation values.
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      username: ASC
    read_access_control:
      ROLE_SUPER_ADMIN:
        id:
          neq: "0"
        internal:
          neq: "1"
        company:
          isNull: ~
    write_access_control:
      ROLE_SUPER_ADMIN:
        raw: "id > 0 or id === null"

Ivoz\Provider\Domain\Model\Currency\Currency:
  itemOperations:
    get: ~
    put: ~ 
    delete: ~
  collectionOperations:
    get: ~
    post: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      iden: ASC
Ivoz\Provider\Domain\Model\Currency\Name: ~

Ivoz\Provider\Domain\Model\AdministratorRelPublicEntity\AdministratorRelPublicEntity:
  itemOperations:
    get:
      depth: 1
    put: ~
  collectionOperations:
    get:
      depth: 1
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles'
    order:
      publicEntity: ASC
    read_access_control:
      ROLE_SUPER_ADMIN:
        inherited:
          administrator: 'Ivoz\Provider\Domain\Model\Administrator\Administrator'
          publicEntity:  'Ivoz\Provider\Domain\Model\PublicEntity\PublicEntity'

Ivoz\Provider\Domain\Model\ApplicationServer\ApplicationServer:
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name: ASC

Ivoz\Provider\Domain\Model\BrandService\BrandService:
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      service: ASC
      code: ASC

Ivoz\Provider\Domain\Model\WebPortal\WebPortal:
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name: ASC
    read_access_control:
      urlType:
        in: ['"god"', '"brand"']

Ivoz\Provider\Domain\Model\WebPortal\Logo: ~

Ivoz\Provider\Domain\Model\Carrier\Carrier:
  itemOperations: []
  collectionOperations: []
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name: ASC

Ivoz\Provider\Domain\Model\Company\Company:
  itemOperations: []
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'

Ivoz\Provider\Domain\Model\Country\Name:
Ivoz\Provider\Domain\Model\Country\Zone:
Ivoz\Provider\Domain\Model\Country\Country:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    pagination_client_enabled: true
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name.en: ASC

Ivoz\Provider\Domain\Model\Destination\Destination:
  itemOperations: []
  collectionOperations: []
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'

Ivoz\Provider\Domain\Model\Domain\Domain:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      domain: ASC
    read_access_control:
    - and:
      - domain: 
          neq: '"users.ivozprovider.local"'
      - domain:
          neq: '"trunks.ivozprovider.local"'
          

Ivoz\Provider\Domain\Model\Feature\Feature:
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      iden: ASC
Ivoz\Provider\Domain\Model\Feature\Name: ~

Ivoz\Provider\Domain\Model\FeaturesRelBrand\FeaturesRelBrand:
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
Ivoz\Provider\Domain\Model\Language\Language:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      iden: ASC
Ivoz\Provider\Domain\Model\Language\Name: ~

Ivoz\Provider\Domain\Model\Invoice\Invoice:
  itemOperations: []
  collectionOperations:
    get: ~
Ivoz\Provider\Domain\Model\Invoice\Pdf: ~

Ivoz\Provider\Domain\Model\MediaRelaySet\MediaRelaySet:
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name: ASC
    write_access_control:
      ROLE_SUPER_ADMIN:
        raw: "id !== 0"

Ivoz\Provider\Domain\Model\ProxyTrunk\ProxyTrunk:
  itemOperations:
    get: ~
    put: ~
    delete: ~
  collectionOperations:
    get: ~
    post: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name: ASC
    delete_access_control:
      ROLE_SUPER_ADMIN:
        id:
          neq: 1

Ivoz\Provider\Domain\Model\ProxyTrunksRelBrand\ProxyTrunksRelBrand:
  itemOperations:
    get:
      depth: 1
    put: ~
    delete: ~
  collectionOperations:
    get:
      depth: 1
    post: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'

Ivoz\Provider\Domain\Model\ProxyUser\ProxyUser:
  itemOperations:
    get: ~
    put: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name: ASC

Ivoz\Provider\Domain\Model\PublicEntity\PublicEntity:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles'
    read_access_control:
      ROLE_SUPER_ADMIN:
        platform:
          eq: 1
Ivoz\Provider\Domain\Model\PublicEntity\Name: ~

Ivoz\Provider\Domain\Model\RatingPlanGroup\RatingPlanGroup:
  itemOperations: []
  collectionOperations: []
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'

Ivoz\Provider\Domain\Model\Service\Service:
  itemOperations:
    get: ~
    put: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
Ivoz\Provider\Domain\Model\Service\Name: ~
Ivoz\Provider\Domain\Model\Service\Description: ~

Ivoz\Provider\Domain\Model\SpecialNumber\SpecialNumber:
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_SUPER_ADMIN:
        brand:
          isNull: ~

Ivoz\Provider\Domain\Model\TerminalManufacturer\TerminalManufacturer:
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      iden: ASC

Ivoz\Provider\Domain\Model\TerminalModel\TerminalModel:
  itemOperations:
    get:
      method: 'GET'
      path: '/terminal_models/{id}'
      requirements:
        id: '\d+'
    get_test_generic_template:
      method: 'GET'
      path: '/terminal_models/{id}/test_generic_template'
      route_name: 'get_test_generic_template'
      pagination_enabled: false
      swagger_context:
        produces:
          - 'text/plain'
        responses:
          '200':
            description: parsed generic template
          '404':
            description: Resource not found
    get_test_specific_template:
      method: 'GET'
      path: '/terminal_models/{id}/test_specific_template'
      route_name: 'get_test_specific_template'
      pagination_enabled: false
      swagger_context:
        produces:
          - 'text/plain'
        parameters:
          - name: mac
            in: query
            type: string
            required: true
            description: 'existing terminal mac'
        responses:
          '200':
            description: parsed specific template
          '404':
            description: Resource not found
    get_default_terminal_model_template:
      method: 'GET'
      path: '/terminal_models/{id}/default_template'
      requirements:
        id: '\d+'
        type: '\s+'
      route_name: 'get_default_terminal_model_template'
      pagination_enabled: false
      swagger_context:
        produces:
          - 'text/plain'
        parameters:
          - name: type
            in: query
            type: string
            enum:
              - generic
              - specific
            required: true
            description: 'template type: generic or specific'
        responses:
          '200':
            description: TerminalModel default template
          '404':
            description: Resource not found
        tags:
          - Provider
    put: ~
    delete: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      iden: ASC

Ivoz\Provider\Domain\Model\Timezone\Timezone:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    pagination_client_enabled: true
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
Ivoz\Provider\Domain\Model\Timezone\Label: ~

Ivoz\Provider\Domain\Model\InvoiceTemplate\InvoiceTemplate:
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name: ASC
    read_access_control:
      ROLE_SUPER_ADMIN:
        brand:
          isNull: ~
  itemOperations:
    get:
      method: 'GET'
      path: '/invoice_templates/{id}'
      requirements:
        id: '\d+'
    put:
      method: 'PUT'
      path: '/invoice_templates/{id}'
      requirements:
        id: '\d+'
    delete:
      method: 'DELETE'
      path: '/invoice_templates/{id}'
      requirements:
        id: '\d+'
    get_invoice_template_preview:
      method: 'GET'
      path: '/invoice_templates/{id}/preview'
      requirements:
        id: '\d+'
      route_name: 'get_invoice_template_preview'
      pagination_enabled: false
      swagger_context:
        produces:
          - 'application/pdf'
        tags:
          - Provider
        responses:
          '200':
            description: Downloaded Generic template
          '404':
            description: Resource not found

Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      name: ASC
    read_access_control:
      ROLE_SUPER_ADMIN:
        brand:
          isNull: ~

Ivoz\Provider\Domain\Model\NotificationTemplateContent\NotificationTemplateContent:
  itemOperations:
    get: ~
    put: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_SUPER_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    order:
      language: ASC
    read_access_control:
      inherited:
        notificationTemplate: 'Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate'
    swagger_context:
      required:
        - notificationTemplate

Ivoz\Provider\Domain\Model\WebPortal\WebTheme:
  itemOperations:
    get_my_theme:
      method: 'GET'
      path: '/my/theme'
      route_name: 'get_my_theme'
      pagination_enabled: false
      swagger_context:
        produces:
          - 'application/json'
        tags:
          - My
    get_my_logo:
      method: 'GET'
      path: '/my/logo/{id}/{name}'
      route_name: 'get_my_logo'
      pagination_enabled: false
      swagger_context:
        produces:
          - 'application/octet-stream'
        parameters:
          - name: id
            in: path
            type: integer
            required: true
            description: 'web portal id'
          - name: name
            in: path
            type: string
            required: true
            description: 'image name'
        tags:
          - My
  collectionOperations: []

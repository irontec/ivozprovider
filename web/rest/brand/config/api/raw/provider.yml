########################################
## Raw
########################################
Ivoz\Provider\Domain\Model\Administrator\Administrator:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        company:
          in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
        internal:
          neq: "1"
    write_access_control:
      ROLE_BRAND_ADMIN:
        raw: "id > 0 or id === null"
        brand:
          eq: "user.getBrand().getId()"
        company:
          in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
    swagger_context:
      required:
        - brand
        - company

Ivoz\Provider\Domain\Model\AdministratorRelPublicEntity\AdministratorRelPublicEntity:
  itemOperations:
    get:
      depth: 1
    put: ~
  collectionOperations:
    get:
      depth: 1
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles'
    read_access_control:
      ROLE_BRAND_ADMIN:
        inherited:
          administrator: 'Ivoz\Provider\Domain\Model\Administrator\Administrator'
    write_access_control:
      ROLE_BRAND_ADMIN:
        inherited:
          administrator: 'Ivoz\Provider\Domain\Model\Administrator\Administrator'
          publicEntity:  'Ivoz\Provider\Domain\Model\PublicEntity\PublicEntity'
    swagger_context:
      required:
      - administrator
      - publicEntity

Ivoz\Provider\Domain\Model\BannedAddress\BannedAddress:
  itemOperations:
    get: ~
    delete:
      method: 'DELETE'
      path: '/banned_addresses/antibruteforce/{id}'
      route_name: 'antibruteforce_banned_address_delete_item'
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
        blocker:
          eq: "'antibruteforce'"

Ivoz\Provider\Domain\Model\BillableCall\BillableCall:
  itemOperations:
    get: ~
    put_billable_call_rate_by_callid:
      method: 'PUT'
      depth: 0
      path: '/billable_calls/{callid}/rate'
      route_name: 'put_billable_call_rate_by_callid'
      swagger_context:
        consumes:
        - 'application/json'
        produces:
        - 'application/json'
        tags:
        - Provider
        parameters:
        - name: callid
          in: path
          type: string
          required: true
          description: 'callid'
        - name: rating
          in: body
          required: true
          description: The rating values
          schema:
            $ref: "#/definitions/BillableCall-rating"
  collectionOperations:
    get:
      swagger_context:
        produces:
        - 'application/json'
        - 'application/ld+json'
        - 'text/csv'
  attributes:
    pagination_client_enabled: true
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\Brand\Brand:
  itemOperations:
    get: ~
    put: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        id:
          eq: "user.getBrand().getId()"

Ivoz\Provider\Domain\Model\Brand\Invoice:
Ivoz\Provider\Domain\Model\Brand\Logo:
Ivoz\Provider\Domain\Model\BalanceNotification\BalanceNotification:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        or:
        - company:
            in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
        - inherited:
            carrier: 'Ivoz\Provider\Domain\Model\Carrier\Carrier'
    write_access_control:
      ROLE_BRAND_ADMIN:
      - or:
        - company:
            in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
        - company:
            isNull: ~
      - or:
        - inheritedOrNull:
            notificationTemplate: 'Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate'
      - or:
        - inheritedOrNull:
            carrier: 'Ivoz\Provider\Domain\Model\Carrier\Carrier'

Ivoz\Provider\Domain\Model\BrandService\BrandService:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\CallCsvScheduler\CallCsvScheduler:
  properties:
    lastExecution:
      attributes:
        swagger_context:
          readOnly: true
    lastExecutionError:
      attributes:
        swagger_context:
          readOnly: true
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
      - and:
        - brand:
            eq: "user.getBrand().getId()"
      - or:
        - inheritedOrNull:
            callCsvNotificationTemplate: 'Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate'
      - or:
        - inheritedOrNull:
            ddi: 'Ivoz\Provider\Domain\Model\Ddi\Ddi'
      - or:
        - inheritedOrNull:
            carrier: 'Ivoz\Provider\Domain\Model\Carrier\Carrier'
      - or:
        - inheritedOrNull:
            retailAccount: 'Ivoz\Provider\Domain\Model\RetailAccount\RetailAccount'
      - or:
        - inheritedOrNull:
            residentialDevice: 'Ivoz\Provider\Domain\Model\ResidentialDevice\ResidentialDevice'
      - or:
        - inheritedOrNull:
            ddiProvider: 'Ivoz\Provider\Domain\Model\DdiProvider\DdiProvider'
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\CallCsvReport\CallCsvReport:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
        raw: 'FALSE'
    swagger_context:
      required:
      - brand
Ivoz\Provider\Domain\Model\CallCsvReport\Csv: ~

Ivoz\Provider\Domain\Model\WebPortal\WebPortal:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
        urlType:
          neq: '"god"'
    swagger_context:
      required:
      - brand
      - urlType
Ivoz\Provider\Domain\Model\WebPortal\Logo: ~

Ivoz\Provider\Domain\Model\Company\Company:
  itemOperations:
    get:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\Company\CompanyDto::CONTEXT_DETAILED
    put:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\Company\CompanyDto::CONTEXT_WITH_FEATURES
    delete: ~
  collectionOperations:
    get: ~
    post:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\Company\CompanyDto::CONTEXT_WITH_FEATURES
      depth: 1
  properties:
    balance:
      attributes:
        swagger_context:
          readOnly: true
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    normalization_context:
      groups: [
        !php/const Ivoz\Provider\Domain\Model\Company\CompanyDto::CONTEXT_WITH_FEATURES
      ]
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
      - and:
        - brand:
            eq: "user.getBrand().getId()"
        - inherited:
            transformationRuleSet: 'Ivoz\Provider\Domain\Model\TransformationRuleSet\TransformationRuleSet'
      - or:
        - inheritedOrNull:
            voicemailNotificationTemplate: 'Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate'
      - or:
        - inheritedOrNull:
            callCsvNotificationTemplate: 'Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate'
      - or:
        - inheritedOrNull:
            invoiceNotificationTemplate: 'Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate'
      - or:
        - inheritedOrNull:
            faxNotificationTemplate: 'Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate'
    swagger_context:
      required:
      - brand
      - transformationRuleSet

Ivoz\Provider\Domain\Model\Currency\Currency:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_USER" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    write_access_control:
      raw: 'FALSE'
Ivoz\Provider\Domain\Model\Currency\Name: ~

Ivoz\Provider\Domain\Model\Country\Name:
Ivoz\Provider\Domain\Model\Country\Zone:
Ivoz\Provider\Domain\Model\Country\Country:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    pagination_client_enabled: true
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    write_access_control:
      raw: 'FALSE'

Ivoz\Provider\Domain\Model\Domain\Domain:
  itemOperations: []
  collectionOperations: []
  attributes:
    access_control: 'FALSE'

Ivoz\Provider\Domain\Model\Ddi\Ddi:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      brand:
        eq: "user.getBrand().getId()"
      company:
        in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
    swagger_context:
      required:
      - brand
      - company
  properties:
    ddie164:
      attributes:
        swagger_context:
          readOnly: true

Ivoz\Provider\Domain\Model\DdiProvider\DdiProvider:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
      - and:
        - brand:
            eq: "user.getBrand().getId()"
        - inherited:
            transformationRuleSet: 'Ivoz\Provider\Domain\Model\TransformationRuleSet\TransformationRuleSet'
    swagger_context:
      required:
      - brand
      - transformationRuleSet

Ivoz\Provider\Domain\Model\DdiProviderRegistration\DdiProviderRegistration:
  collectionOperations:
    get:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\DdiProviderRegistration\DdiProviderRegistrationDto::CONTEXT_DETAILED_COLLECTION
      normalization_context:
        groups: [
          !php/const Ivoz\Provider\Domain\Model\DdiProviderRegistration\DdiProviderRegistrationDto::CONTEXT_DETAILED_COLLECTION
        ]
    post: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      inherited:
        ddiProvider: 'Ivoz\Provider\Domain\Model\DdiProvider\DdiProvider'
    swagger_context:
      required:
      - ddiProvider

Ivoz\Provider\Domain\Model\DdiProviderAddress\DdiProviderAddress:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      inherited:
        ddiProvider: 'Ivoz\Provider\Domain\Model\DdiProvider\DdiProvider'
    swagger_context:
      required:
      - ddiProvider

Ivoz\Provider\Domain\Model\Destination\Name:
Ivoz\Provider\Domain\Model\Destination\Destination:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\DestinationRate\DestinationRate:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      inherited:
        destinationRateGroup: 'Ivoz\Provider\Domain\Model\DestinationRateGroup\DestinationRateGroup'
    write_access_control:
      inherited:
        destinationRateGroup: 'Ivoz\Provider\Domain\Model\DestinationRateGroup\DestinationRateGroup'
        destination: 'Ivoz\Provider\Domain\Model\Destination\Destination'
    swagger_context:
      required:
      - destinationRateGroup
      - destination

Ivoz\Provider\Domain\Model\DestinationRateGroup\Name:
Ivoz\Provider\Domain\Model\DestinationRateGroup\Description:
Ivoz\Provider\Domain\Model\DestinationRateGroup\File:
Ivoz\Provider\Domain\Model\DestinationRateGroup\DestinationRateGroup:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\Feature\Feature:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
Ivoz\Provider\Domain\Model\Feature\Name: ~

Ivoz\Provider\Domain\Model\Fax\Fax:
  itemOperations: []
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        company:
          in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
    write_access_control:
      ROLE_BRAND_ADMIN:
        raw: 'FALSE'

Ivoz\Provider\Domain\Model\FeaturesRelBrand\FeaturesRelBrand:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
        raw: 'FALSE'

Ivoz\Provider\Domain\Model\FeaturesRelCompany\FeaturesRelCompany:
  itemOperations:
    get: ~
    delete: ~
  collectionOperations:
    get:
      depth: 1
    post:
      depth: 1
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        company:
          in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
    swagger_context:
      required:
      - company

Ivoz\Provider\Domain\Model\FixedCost\FixedCost:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\FixedCostsRelInvoice\FixedCostsRelInvoice:
  itemOperations:
    get: ~
    delete: ~
    put:
      depth: 1
  collectionOperations:
    get:
      depth: 1
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\FixedCostsRelInvoice\FixedCostsRelInvoiceDto::CONTEXT_DETAILED_COLLECTION
      normalization_context:
        groups: [
          !php/const Ivoz\Provider\Domain\Model\FixedCostsRelInvoice\FixedCostsRelInvoiceDto::CONTEXT_DETAILED_COLLECTION
        ]
    post:
      depth: 1
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      inherited:
        fixedCost: 'Ivoz\Provider\Domain\Model\FixedCost\FixedCost'
    write_access_control:
      inherited:
        fixedCost: 'Ivoz\Provider\Domain\Model\FixedCost\FixedCost'
        invoice: 'Ivoz\Provider\Domain\Model\Invoice\Invoice'
    swagger_context:
      required:
      - fixedCost
      - invoice

Ivoz\Provider\Domain\Model\Friend\Friend:
  attributes:
    pagination_client_enabled: true
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        company:
          in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
  itemOperations:
    get: ~
    put: ~
    delete: ~
  collectionOperations:
    get: ~
    post: ~
    get_status_collection:
      method: 'GET'
      path: 'friends/status'
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\Friend\FriendDto::CONTEXT_STATUS
      normalization_context:
        groups: [
          !php/const Ivoz\Provider\Domain\Model\Friend\FriendDto::CONTEXT_STATUS
        ]

Ivoz\Provider\Domain\Model\Invoice\Invoice:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
      - and:
        - brand:
            eq: "user.getBrand().getId()"
        - company:
            in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
        - inherited:
            invoiceTemplate: 'Ivoz\Provider\Domain\Model\InvoiceTemplate\InvoiceTemplate'
      - or:
        - inheritedOrNull:
            numberSequence: 'Ivoz\Provider\Domain\Model\InvoiceNumberSequence\InvoiceNumberSequence'
    swagger_context:
      required:
      - brand
      - company
      - invoiceTemplate
Ivoz\Provider\Domain\Model\Invoice\Pdf: ~

Ivoz\Provider\Domain\Model\InvoiceNumberSequence\InvoiceNumberSequence:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\InvoiceScheduler\InvoiceScheduler:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
        - and:
          - brand:
              eq: "user.getBrand().getId()"
        - or:
          - inheritedOrNull:
              company: 'Ivoz\Provider\Domain\Model\Company\Company'
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\FixedCostsRelInvoiceScheduler\FixedCostsRelInvoiceScheduler:
  itemOperations:
    get: ~
    delete: ~
    put:
      depth: 1
  collectionOperations:
    get:
      depth: 1
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\FixedCostsRelInvoiceScheduler\FixedCostsRelInvoiceSchedulerDto::CONTEXT_DETAILED_COLLECTION
      normalization_context:
        groups: [
          !php/const Ivoz\Provider\Domain\Model\FixedCostsRelInvoiceScheduler\FixedCostsRelInvoiceSchedulerDto::CONTEXT_DETAILED_COLLECTION
        ]
    post: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      inherited:
        fixedCost: 'Ivoz\Provider\Domain\Model\FixedCost\FixedCost'
    write_access_control:
      inherited:
        fixedCost: 'Ivoz\Provider\Domain\Model\FixedCost\FixedCost'
        invoiceScheduler: 'Ivoz\Provider\Domain\Model\InvoiceScheduler\InvoiceScheduler'
    swagger_context:
      required:
      - fixedCost
      - invoiceScheduler

Ivoz\Provider\Domain\Model\InvoiceTemplate\InvoiceTemplate:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
      - or:
        - brand:
            eq: "user.getBrand().getId()"
        - brand:
            isNull: ~
    write_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\Language\Name:
Ivoz\Provider\Domain\Model\Language\Language:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_USER" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'

Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\NotificationTemplateContent\NotificationTemplateContent:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      inherited:
        notificationTemplate: 'Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate'
    swagger_context:
      required:
      - notificationTemplate

Ivoz\Provider\Domain\Model\Carrier\Carrier:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
      - and:
        - brand:
            eq: "user.getBrand().getId()"
        - inherited:
            transformationRuleSet: 'Ivoz\Provider\Domain\Model\TransformationRuleSet\TransformationRuleSet'
    swagger_context:
      required:
      - brand
      - transformationRuleSet

Ivoz\Provider\Domain\Model\CarrierServer\CarrierServer:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
        inherited:
          carrier: 'Ivoz\Provider\Domain\Model\Carrier\Carrier'
    swagger_context:
      required:
      - brand
      - carrier

Ivoz\Provider\Domain\Model\OutgoingRouting\OutgoingRouting:
  itemOperations:
    get:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\OutgoingRouting\OutgoingRoutingDto::CONTEXT_DETAILED
    put:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\OutgoingRouting\OutgoingRoutingDto::CONTEXT_WITH_CARRIERS
    delete: ~
  collectionOperations:
    get: ~
    post:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\OutgoingRouting\OutgoingRoutingDto::CONTEXT_WITH_CARRIERS
      depth: 1
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    normalization_context:
      groups: [
        !php/const Ivoz\Provider\Domain\Model\OutgoingRouting\OutgoingRoutingDto::CONTEXT_WITH_CARRIERS
      ]
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    write_access_control:
      ROLE_BRAND_ADMIN:
      - and:
        - brand:
            eq: "user.getBrand().getId()"
      - or:
        - inheritedOrNull:
            carrier: 'Ivoz\Provider\Domain\Model\Carrier\Carrier'
      - or:
        - inheritedOrNull:
            company: 'Ivoz\Provider\Domain\Model\Company\Company'
      - or:
        - inheritedOrNull:
            routingPattern: 'Ivoz\Provider\Domain\Model\RoutingPattern\RoutingPattern'
      - or:
        - inheritedOrNull:
            routingPatternGroup: 'Ivoz\Provider\Domain\Model\RoutingPatternGroup\RoutingPatternGroup'
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\PublicEntity\PublicEntity:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles'
    read_access_control:
      ROLE_BRAND_ADMIN:
        client:
          eq: 1
    swagger_context:
      required:
      - brand
Ivoz\Provider\Domain\Model\PublicEntity\Name: ~

Ivoz\Provider\Domain\Model\RatingPlanGroup\Name:
Ivoz\Provider\Domain\Model\RatingPlanGroup\Description:
Ivoz\Provider\Domain\Model\RatingPlanGroup\RatingPlanGroup:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\RatingPlan\RatingPlan:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      inherited:
        ratingPlanGroup: 'Ivoz\Provider\Domain\Model\RatingPlanGroup\RatingPlanGroup'
    write_access_control:
      inherited:
        destinationRateGroup: 'Ivoz\Provider\Domain\Model\DestinationRateGroup\DestinationRateGroup'
        ratingPlanGroup: 'Ivoz\Provider\Domain\Model\RatingPlanGroup\RatingPlanGroup'
    swagger_context:
      required:
      - destinationRateGroup
      - ratingPlanGroup

Ivoz\Provider\Domain\Model\RatingProfile\RatingProfile:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
      - or:
        - inherited:
            company: 'Ivoz\Provider\Domain\Model\Company\Company'
        - inherited:
            carrier: 'Ivoz\Provider\Domain\Model\Carrier\Carrier'
    write_access_control:
      ROLE_BRAND_ADMIN:
      - and:
        - inherited:
            ratingPlanGroup: 'Ivoz\Provider\Domain\Model\RatingPlanGroup\RatingPlanGroup'
      - or:
        - inheritedOrNull:
            company: 'Ivoz\Provider\Domain\Model\Company\Company'
      - or:
        - inheritedOrNull:
            carrier: 'Ivoz\Provider\Domain\Model\Carrier\Carrier'
    swagger_context:
      required:
      - ratingPlanGroup

Ivoz\Provider\Domain\Model\RetailAccount\RetailAccount:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    pagination_client_enabled: true
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
        company:
          in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
    swagger_context:
      required:
      - brand
      - company
  itemOperations:
    get: ~
    put: ~
    delete: ~
  collectionOperations:
    get: ~
    post: ~
    get_status_collection:
      method: 'GET'
      path: 'retail_accounts/status'
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\RetailAccount\RetailAccountDto::CONTEXT_STATUS
      normalization_context:
        groups: [
          !php/const Ivoz\Provider\Domain\Model\RetailAccount\RetailAccountDto::CONTEXT_STATUS
        ]

Ivoz\Provider\Domain\Model\ResidentialDevice\ResidentialDevice:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    pagination_client_enabled: true
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
        company:
          in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
    swagger_context:
      required:
      - brand
      - company
  itemOperations:
    get: ~
    put: ~
    delete: ~
  collectionOperations:
    get: ~
    post: ~
    get_status_collection:
      method: 'GET'
      path: 'residential_devices/status'
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\ResidentialDevice\ResidentialDeviceDto::CONTEXT_STATUS
      normalization_context:
        groups: [
          !php/const Ivoz\Provider\Domain\Model\ResidentialDevice\ResidentialDeviceDto::CONTEXT_STATUS
        ]

Ivoz\Provider\Domain\Model\RoutingPatternGroup\RoutingPatternGroup:
  itemOperations:
    get:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\RoutingPatternGroup\RoutingPatternGroupDto::CONTEXT_DETAILED
    put:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\RoutingPatternGroup\RoutingPatternGroupDto::CONTEXT_WITH_PATTERNS
    delete: ~
  collectionOperations:
    get: ~
    post:
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\RoutingPatternGroup\RoutingPatternGroupDto::CONTEXT_WITH_PATTERNS
      depth: 1
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    normalization_context:
      groups: [
        !php/const Ivoz\Provider\Domain\Model\RoutingPatternGroup\RoutingPatternGroupDto::CONTEXT_WITH_PATTERNS
      ]
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\RoutingPatternGroupsRelPattern\RoutingPatternGroupsRelPattern:
  collectionOperations:
    get:
      depth: 1
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\RoutingPatternGroupsRelPattern\RoutingPatternGroupsRelPatternDto::CONTEXT_DETAILED_COLLECTION
      normalization_context:
        groups: [
          !php/const Ivoz\Provider\Domain\Model\RoutingPatternGroupsRelPattern\RoutingPatternGroupsRelPatternDto::CONTEXT_DETAILED_COLLECTION
        ]
    post:
      depth: 1
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      inherited:
        routingPatternGroup: 'Ivoz\Provider\Domain\Model\RoutingPatternGroup\RoutingPatternGroup'
    write_access_control:
      inherited:
        routingPatternGroup: 'Ivoz\Provider\Domain\Model\RoutingPatternGroup\RoutingPatternGroup'
        routingPattern: 'Ivoz\Provider\Domain\Model\RoutingPattern\RoutingPattern'
    swagger_context:
      required:
      - routingPatternGroup
      - routingPattern

Ivoz\Provider\Domain\Model\RoutingPattern\Name:
Ivoz\Provider\Domain\Model\RoutingPattern\Description:
Ivoz\Provider\Domain\Model\RoutingPattern\RoutingPattern:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\RoutingTag\RoutingTag:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\Service\Service:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
Ivoz\Provider\Domain\Model\Service\Name: ~
Ivoz\Provider\Domain\Model\Service\Description: ~

Ivoz\Provider\Domain\Model\SpecialNumber\SpecialNumber:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
      - or:
        - brand:
            eq: "user.getBrand().getId()"
        - brand:
            isNull: ~
    write_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand

Ivoz\Provider\Domain\Model\Terminal\Terminal:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    pagination_client_enabled: true
    read_access_control:
      ROLE_BRAND_ADMIN:
        company:
          in: "companyRepository.getSupervisedCompanyIdsByAdmin(user)"
    write_access_control:
      ROLE_BRAND_ADMIN:
        raw: 'FALSE'
    swagger_context:
      required:
      - company
  itemOperations: []
  collectionOperations:
    get_status_collection:
      method: 'GET'
      path: 'terminals/status'
      operation_normalization_context: !php/const Ivoz\Provider\Domain\Model\Terminal\TerminalDto::CONTEXT_STATUS
      normalization_context:
        groups: [
          !php/const Ivoz\Provider\Domain\Model\Terminal\TerminalDto::CONTEXT_STATUS
        ]

Ivoz\Provider\Domain\Model\Timezone\Timezone:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    pagination_client_enabled: true
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
Ivoz\Provider\Domain\Model\Timezone\Label: ~

Ivoz\Provider\Domain\Model\TransformationRuleSet\TransformationRuleSet:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
      - or:
        - brand:
            eq: "user.getBrand().getId()"
        - brand:
            isNull: ~
    write_access_control:
      ROLE_BRAND_ADMIN:
        brand:
          eq: "user.getBrand().getId()"
    swagger_context:
      required:
      - brand
Ivoz\Provider\Domain\Model\TransformationRuleSet\Name: ~

Ivoz\Provider\Domain\Model\TransformationRule\TransformationRule:
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      inherited:
        transformationRuleSet: 'Ivoz\Provider\Domain\Model\TransformationRuleSet\TransformationRuleSet'
    write_access_control:
      transformationRuleSet:
        in: "transformationRuleSetRepository.getIdsByBrandId(user.getBrand().getId())"
    swagger_context:
      required:
      - transformationRuleSet

Ivoz\Provider\Domain\Model\User\User:
  itemOperations: []
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles'
    read_access_control:
      inherited:
        company: 'Ivoz\Provider\Domain\Model\Company\Company'
    write_access_control:
      ROLE_BRAND_ADMIN:
        raw: 'FALSE'

Ivoz\Provider\Domain\Model\ProxyTrunk\ProxyTrunk:
  itemOperations:
    get: ~
  collectionOperations:
    get: ~
  attributes:
    access_control: '"ROLE_BRAND_ADMIN" in roles && user.hasAccessPrivileges(_api_resource_class, request.getMethod())'
    read_access_control:
      ROLE_BRAND_ADMIN:
        id:
          in: "proxyTrunksRelBrandRepository.getTrunkIdsByBrandAdmin(user)"
    write_access_control:
      ROLE_BRAND_ADMIN:
        raw: 'FALSE'

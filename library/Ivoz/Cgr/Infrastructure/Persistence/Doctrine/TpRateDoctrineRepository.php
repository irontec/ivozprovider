<?php

namespace Ivoz\Cgr\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\NativeQuery;
use Ivoz\Cgr\Domain\Model\TpRate\TpRate;
use Ivoz\Cgr\Domain\Model\TpRate\TpRateRepository;
use Ivoz\Core\Infrastructure\Domain\Service\DoctrineQueryRunner;
use Doctrine\Persistence\ManagerRegistry;

/**
 * TpRateDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TpRateDoctrineRepository extends ServiceEntityRepository implements TpRateRepository
{
    public function __construct(
        ManagerRegistry $registry,
        private DoctrineQueryRunner $queryRunner
    ) {
        parent::__construct($registry, TpRate::class);
    }

    /**
     * @param int $destinationRateGroupId
     * @return int affected rows
     */
    public function syncWithBusiness($destinationRateGroupId): int
    {
        $tpRatesInsert =
            "INSERT INTO tp_rates"
            . " (tpid, tag, rate, connect_fee, rate_increment, group_interval_start, destinationRateId)"
            . " SELECT CONCAT('b', DRG.brandId), CONCAT('b', DRG.brandId, 'rt', DR.id), rate, connectFee, rateIncrement, groupIntervalStart, DR.id"
            . " FROM DestinationRates DR"
            . " INNER JOIN DestinationRateGroups DRG ON DRG.id = DR.destinationRateGroupId"
            . " WHERE DRG.id = $destinationRateGroupId"
            . " ON DUPLICATE KEY UPDATE"
            . " rate = VALUES(rate),"
            . " connect_fee = VALUES(connect_fee),"
            . " rate_increment = VALUES(rate_increment),"
            . " group_interval_start = VALUES(group_interval_start)";

        $nativeQuery = new NativeQuery($this->_em);
        $nativeQuery->setSQL($tpRatesInsert);

        return $this->queryRunner->execute(
            TpRate::class,
            $nativeQuery
        );
    }
}

<?php

namespace Ivoz\Kam\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Core\Infrastructure\Persistence\Doctrine\Model\Helper\CriteriaHelper;
use Ivoz\Kam\Domain\Model\TrunksLcrRule\TrunksLcrRule;
use Ivoz\Kam\Domain\Model\TrunksLcrRule\TrunksLcrRuleInterface;
use Ivoz\Kam\Domain\Model\TrunksLcrRule\TrunksLcrRuleRepository;
use Ivoz\Provider\Domain\Model\OutgoingRouting\OutgoingRoutingInterface;
use Doctrine\Persistence\ManagerRegistry;

/**
 * TrunksLcrRuleDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TrunksLcrRuleDoctrineRepository extends ServiceEntityRepository implements TrunksLcrRuleRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, TrunksLcrRule::class);
    }

    /**
     * {@inheritdoc}
     *
     * @param OutgoingRoutingInterface $outgoingRouting
     * @return TrunksLcrRuleInterface[]
     * @throws \Doctrine\ORM\Query\QueryException
     */
    public function findOrphanLcrRules(OutgoingRoutingInterface $outgoingRouting)
    {
        $lcrRuleIds = [];

        $outgoingRoutingLcrRules = $outgoingRouting->getLcrRules();
        foreach ($outgoingRoutingLcrRules as $outgoingRoutingLcrRule) {
            $lcrRuleIds[] = $outgoingRoutingLcrRule->getId();
        }

        $qb = $this->createQueryBuilder('self');
        $qb
            ->select('self')
            ->addCriteria(
                CriteriaHelper::fromArray([
                    [ 'outgoingRouting', 'eq', $outgoingRouting ],
                    [ 'id', 'notIn', $lcrRuleIds ]
                ])
            );

        return $qb->getQuery()->getResult();
    }
}

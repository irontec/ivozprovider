<?php

namespace Ivoz\Kam\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\Query\Expr\OrderBy;
use Ivoz\Core\Infrastructure\Persistence\Doctrine\Model\Helper\CriteriaHelper;
use Ivoz\Kam\Domain\Model\UsersCdr\UsersCdr;
use Ivoz\Kam\Domain\Model\UsersCdr\UsersCdrInterface;
use Ivoz\Kam\Domain\Model\UsersCdr\UsersCdrRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * UsersCdrDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UsersCdrDoctrineRepository extends ServiceEntityRepository implements UsersCdrRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, UsersCdr::class);
    }

    /**
     * @param int $userId
     * @return int
     */
    public function countByUserId($userId): int
    {
        $qb = $this->createQueryBuilder('self');

        return $qb
            ->select('count(self.id)')
            ->where($qb->expr()->eq('self.user', $userId))
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * @param string $callid
     * @return UsersCdrInterface[]
     */
    public function findByCallid($callid)
    {
        /** @var UsersCdrInterface[] $response */
        $response = $this->findBy([
            'callid' => $callid
        ]);

        return $response;
    }

    /**
     * @param string $callid
     * @return UsersCdrInterface | null
     */
    public function findOneByCallid($callid)
    {
        /** @var UsersCdrInterface $response */
        $response = $this->findOneBy([
            'callid' => $callid
        ]);

        return $response;
    }

    public function countInboundCallsInLastMonthByUser(int $userId): int
    {
        $qb = $this->createQueryBuilder('self');
        $prevMonth = strtotime('-1 month');
        $dateTime = date('Y-m-d H:i:s', $prevMonth);

        return $qb
            ->select('count(self.id)')
            ->where('self.user = :userId')
            ->andWhere('self.direction= :direction')
            ->andWhere('self.startTime > :time')
            ->setParameter('userId', $userId)
            ->setParameter('direction', 'inbound')
            ->setParameter('time', $dateTime)
            ->getQuery()
            ->getSingleScalarResult();
    }

    public function countOutboundCallsInLastMonthByUser(int $userId): int
    {
        $qb = $this->createQueryBuilder('self');
        $prevMonth = strtotime('-1 month');
        $dateTime = date('Y-m-d H:i:s', $prevMonth);

        return $qb
            ->select('count(self.id)')
            ->where('self.user = :userId')
            ->andWhere('self.direction= :direction')
            ->andWhere('self.startTime > :time')
            ->setParameter('userId', $userId)
            ->setParameter('direction', 'outbound')
            ->setParameter('time', $dateTime)
            ->getQuery()
            ->getSingleScalarResult();
    }

    /**
     * This method expects results to be marked as parsed as soon as they're used:
     * a.k.a it does not apply any query offset, just a limit
     *
     * @inheritdoc
     * @see UsersCdrRepository::getUnparsedCallsGeneratorWithoutOffset
     */
    public function getUnparsedCallsGeneratorWithoutOffset(int $batchSize, array $order = null): \Generator
    {
        $dateFrom = new \DateTime(
            '10 seconds ago',
            new \DateTimeZone('UTC')
        );

        $qb = $this->createQueryBuilder('self');
        $qb->addCriteria(CriteriaHelper::fromArray([
            'or' => [
                ['parsed', 'eq', '0'],
                ['parsed', 'isNull'],
            ],
            ['endTime', 'lte', $dateFrom->format('Y-m-d H:i:s')],
        ]));
        $qb->setMaxResults($batchSize);

        if ($order) {
            foreach ($order as $k => $val) {
                if ($val instanceof OrderBy) {
                    $qb->orderBy($val);
                } else {
                    $qb->orderBy(
                        (string) $k,
                        $val
                    );
                }
            }
        }

        $continue =  true;
        while ($continue) {
            $query = $qb->getQuery();
            /** @var UsersCdrInterface[] $results */
            $results = $query->getResult();
            $continue = count($results) === $batchSize;

            yield $results;
        }
    }
}

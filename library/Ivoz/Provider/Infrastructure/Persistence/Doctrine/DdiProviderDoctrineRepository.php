<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Provider\Domain\Model\Administrator\AdministratorInterface;
use Ivoz\Provider\Domain\Model\DdiProvider\DdiProvider;
use Ivoz\Provider\Domain\Model\DdiProvider\DdiProviderInterface;
use Ivoz\Provider\Domain\Model\DdiProvider\DdiProviderRepository;
use Doctrine\Persistence\ManagerRegistry;
use Ivoz\Provider\Domain\Model\Brand\BrandInterface;
use Ivoz\Provider\Domain\Model\ProxyTrunk\ProxyTrunkInterface;

/**
 * DdiProviderDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @template-extends ServiceEntityRepository<DdiProvider>
 */
class DdiProviderDoctrineRepository extends ServiceEntityRepository implements DdiProviderRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, DdiProvider::class);
    }

    public function getDdiProviderIdsByBrandAdmin(AdministratorInterface $admin): array
    {
        if (!$admin->isBrandAdmin()) {
            throw new \DomainException('User must be brand admin');
        }

        $qb = $this->createQueryBuilder('self');
        $expression = $qb->expr();

        $qb
            ->select('self.id')
            ->where(
                $expression->eq(
                    'self.brand',
                    $admin->getBrand()->getId()
                )
            );

        $result = $qb->getQuery()->getScalarResult();

        return array_map(
            'intval',
            array_column(
                $result,
                'id'
            )
        );
    }

    /**
     * @param BrandInterface $brand
     * @param ProxyTrunkInterface $proxyTrunks
     * @return array
     */
    public function findByBrandAndProxyTrunks(BrandInterface $brand, ProxyTrunkInterface $proxyTrunks)
    {
        /** @var DdiProviderInterface[] $response */
        $response = $this->findBy([
            'brand' => $brand,
            'proxyTrunk' => $proxyTrunks
        ]);

        return $response;
    }

    /**
     * @return DdiProviderInterface[]
     */
    public function findByProxyTrunks(ProxyTrunkInterface $proxyTrunks): array
    {
        /** @var DdiProviderInterface[] $response */
        $response = $this->findBy([
            'proxyTrunk' => $proxyTrunks
        ]);

        return $response;
    }

    /**
     * @param int $brandId | null
     * @return string[]
     */
    public function getNames($brandId = null)
    {
        $qb = $this->createQueryBuilder('self');

        $qb->select('self.id, self.name');

        if ($brandId) {
            $qb->where(
                $qb->expr()->eq('self.brand', $brandId)
            );
        }

        $result = $qb
            ->select('self.id, self.name')
            ->getQuery()
            ->getScalarResult();

        $response = [];
        foreach ($result as $row) {
            $response[$row['id']] = $row['name'];
        }

        return $response;
    }

    /**
     * @return DdiProviderInterface | null
     */
    public function findOneByBrandAndName(int $brandId, string $name)
    {
        /** @var DdiProviderInterface $response */
        $response = $this->findOneBy([
            'brand' => $brandId,
            'name' => $name
        ]);

        return $response;
    }

    /**
     * @return DdiProviderInterface[]
     */
    public function findByMediaRelaySetIdAndBrandId(int $mediaRelaySetId, int $brandId): array
    {
        return $this->findBy(
            [
               'mediaRelaySet' => $mediaRelaySetId,
               'brand' => $brandId
            ]
        );
    }
}

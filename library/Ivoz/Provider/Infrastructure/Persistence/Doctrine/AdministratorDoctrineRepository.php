<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Core\Infrastructure\Persistence\Doctrine\Model\Helper\CriteriaHelper;
use Ivoz\Provider\Domain\Model\Administrator\AdministratorInterface;
use Ivoz\Provider\Domain\Model\Administrator\AdministratorRepository;
use Ivoz\Provider\Domain\Model\Administrator\Administrator;
use Symfony\Bridge\Doctrine\RegistryInterface;

/**
 * AdministratorDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdministratorDoctrineRepository extends ServiceEntityRepository implements AdministratorRepository
{
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, Administrator::class);
    }

    /**
     * @inheritdoc
     * @see AdministratorRepository::getInnerGlobalAdmin
     */
    public function getInnerGlobalAdmin()
    {
        $qb = $this->createQueryBuilder('self');

        $qb
            ->select('self')
            ->addCriteria(
                CriteriaHelper::fromArray([
                    ['id', 'eq', 0],
                    ['active', 'eq', 0],
                    ['brand', 'isNUll'],
                    ['company', 'isNUll']
                ])
            );

        $result = $qb->getQuery()->getResult();
        $privateAdmin = current($result);
        if (!$privateAdmin) {
            throw new \RuntimeException('Unable to find inner global admin');
        }

        return $privateAdmin;
    }

    /**
     * @param string $username
     * @return null| AdministratorInterface
     */
    public function findPlatformAdminByUsername(string $username)
    {
        return $this->findOneBy([
            'username' => $username,
            'brand' => null,
            'company' => null
        ]);
    }
}

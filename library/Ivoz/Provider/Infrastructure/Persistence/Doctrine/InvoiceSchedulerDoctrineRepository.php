<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Provider\Domain\Model\InvoiceScheduler\InvoiceScheduler;
use Ivoz\Provider\Domain\Model\InvoiceScheduler\InvoiceSchedulerInterface;
use Ivoz\Provider\Domain\Model\InvoiceScheduler\InvoiceSchedulerRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * InvoiceSchedulerDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceSchedulerDoctrineRepository extends ServiceEntityRepository implements InvoiceSchedulerRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, InvoiceScheduler::class);
    }

    /**
     * @return InvoiceSchedulerInterface[]
     */
    public function getPendingSchedulers()
    {
        $now = new \DateTime(
            'now',
            new \DateTimeZone('UTC')
        );

        // nextExecution
        $qb = $this->createQueryBuilder('self');
        $nextExecutionCondition =
            $qb
                ->expr()
                ->lte(
                    'self.nextExecution',
                    "'" . $now->format('Y-m-d H:i:s') . "'"
                );

        $query = $qb
            ->select('self')
            ->where($nextExecutionCondition)
            ->getQuery();

        return $query->getResult();
    }

    /**
     * @return array
     */
    public function getCompanyIdsInUse($schedulerIdToExclude)
    {
        if (!$schedulerIdToExclude) {
            $schedulerIdToExclude = -1;
        }

        $qb = $this
            ->createQueryBuilder('self');

        $query = $qb
            ->select('IDENTITY(self.company)')
            ->where(
                $qb->expr()->neq('self.id', $schedulerIdToExclude)
            );

        $ids = [];
        $items = $query
            ->getQuery()
            ->getScalarResult();

        foreach ($items as $item) {
            $ids[] = current($item);
        }

        return $ids;
    }
}

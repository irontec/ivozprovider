<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Core\Infrastructure\Persistence\Doctrine\Model\Helper\CriteriaHelper;
use Ivoz\Core\Infrastructure\Persistence\Doctrine\ORM\Query;
use Ivoz\Provider\Domain\Model\Domain\DomainInterface;
use Ivoz\Provider\Domain\Model\Friend\Friend;
use Ivoz\Provider\Domain\Model\Friend\FriendInterface;
use Ivoz\Provider\Domain\Model\Friend\FriendRepository;
use Ivoz\Provider\Infrastructure\Persistence\Doctrine\Traits\CountByCriteriaTrait;
use Doctrine\Persistence\ManagerRegistry;

/**
 * FriendDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @template-extends ServiceEntityRepository<Friend>
 */
class FriendDoctrineRepository extends ServiceEntityRepository implements FriendRepository
{
    use CountByCriteriaTrait;

    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Friend::class);
    }

    /**
     * @inheritdoc
     */
    public function findOneByNameAndDomain(string $name, DomainInterface $domain)
    {
        /** @var FriendInterface $response */
        $response = $this->findOneBy([
            "name" => $name,
            "domain" => $domain
        ]);

        return $response;
    }

    /**
     * @param int $companyId
     * @return string[]
     */
    public function findNamesByCompanyId(int $companyId): array
    {
        $qb = $this->createQueryBuilder('self');
        $expression = $qb->expr();

        $qb
            ->select('self.name')
            ->where(
                $expression->eq('self.company', $companyId)
            );

        $result = $qb
            ->getQuery()
            ->getScalarResult();

        return array_column(
            $result,
            'name'
        );
    }

    /**
     * @param int[] $companyIds
     * @return int
     */
    public function countRegistrableDevices(array $companyIds): int
    {
        $criteria = CriteriaHelper::fromArray([
            ['directConnectivity', 'eq', FriendInterface::DIRECTCONNECTIVITY_NO],
            ['company', 'in', $companyIds]
        ]);

        return $this->countByCriteria($criteria);
    }

    public function findByCompanyAndInterCompany(int $company, int $interCompany): array
    {
        return $this->findBy([
            'company' => $company,
            'interCompany' => $interCompany,

        ]);
    }

    public function getMaxPriorityForCompany(int $companyId): int
    {
        $qb = $this->createQueryBuilder('self');
        $expression = $qb->expr();

        $qb->select('MAX(self.priority)')
            ->where(
                $expression->eq('self.company', $companyId)
            );

        $result = $qb->getQuery()->getSingleScalarResult();
        return (int) $result;
    }
}

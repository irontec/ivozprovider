<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Provider\Domain\Model\BalanceNotification\BalanceNotificationInterface;
use Ivoz\Provider\Domain\Model\CallCsvReport\CallCsvReportInterface;
use Ivoz\Provider\Domain\Model\Company\CompanyInterface;
use Ivoz\Provider\Domain\Model\Language\LanguageInterface;
use Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplate;
use Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplateInterface;
use Ivoz\Provider\Domain\Model\NotificationTemplate\NotificationTemplateRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * NotificationTemplateDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @template-extends ServiceEntityRepository<NotificationTemplate>
 */
class NotificationTemplateDoctrineRepository extends ServiceEntityRepository implements NotificationTemplateRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, NotificationTemplate::class);
    }

    public function findCallCsvTemplateByCallCsvReport(CallCsvReportInterface $callCsvReport): NotificationTemplateInterface
    {
        $template = $this->getNotificationTemplateByReport($callCsvReport);
        $company = $callCsvReport->getCompany();
        $brand = $callCsvReport->getBrand();

        if (!$company && !$brand) {
            /**
             * @todo remove this as soon as brand is required in database schema
             */
            throw new \Exception(
                'Either brand or company are required'
            );
        }

        $language = $company
            ? $company->getLanguage()
            : $brand->getLanguage();

        if (
            $template
            && $template->getContentsByLanguage($language)
        ) {
            return $template;
        }

        /** @var NotificationTemplateInterface $response */
        $response = $this->findOneBy([
            'brand' => null,
            'type' => 'callCsv'
        ]);

        return $response;
    }

    private function getNotificationTemplateByReport(CallCsvReportInterface $callCsvReport): ?NotificationTemplateInterface
    {
        $company = $callCsvReport->getCompany();
        if ($company) {
            $callCsvNotificationTemplate = $company->getCallCsvNotificationTemplate();
            if (!$callCsvNotificationTemplate) {
                $brand = $company->getBrand();
                $callCsvNotificationTemplate = $brand->getCallCsvNotificationTemplate();
            }
            return $callCsvNotificationTemplate;
        }

        $scheduler = $callCsvReport
            ->getCallCsvScheduler();

        if (!$scheduler) {
            return null;
        }

        return $scheduler->getCallCsvNotificationTemplate();
    }

    public function findInvoiceNotificationTemplateByCompany(
        CompanyInterface $company
    ): NotificationTemplateInterface {
        $language = $company->getLanguage();
        $invoiceNotificationTemplate = $company->getInvoiceNotificationTemplate();

        if (
            $invoiceNotificationTemplate
            && $invoiceNotificationTemplate->getContentsByLanguage($language)
        ) {
            return $invoiceNotificationTemplate;
        }

        /** @var NotificationTemplateInterface $response */
        $response = $this->findOneBy([
            'brand' => null,
            'type' => 'invoice'
        ]);

        return $response;
    }

    public function findFaxTemplateByCompany(CompanyInterface $company): NotificationTemplateInterface
    {
        $language = $company->getLanguage();
        $faxNotificationTemplate = $company->getFaxNotificationTemplate();
        if ($faxNotificationTemplate) {
            if ($faxNotificationTemplate->getContentsByLanguage($language)) {
                return $faxNotificationTemplate;
            }
        }

        // no company template associated, fallback to brand notification template for faxes
        $faxNotificationTemplate = $company
            ->getBrand()
            ->getFaxNotificationTemplate();

        if ($faxNotificationTemplate) {
            if ($faxNotificationTemplate->getContentsByLanguage($language)) {
                return $faxNotificationTemplate;
            }
        }

        // use generic template
        /** @var NotificationTemplateInterface $response */
        $response = $this->findOneBy([
            'brand' => null,
            'type' => 'fax'
        ]);

        return $response;
    }

    public function findMaxDailyUsageTemplateByCompany(CompanyInterface $company): NotificationTemplateInterface
    {
        $notificationTemplate = $company->getMaxDailyUsageNotificationTemplate();
        if (!$notificationTemplate) {
            $notificationTemplate = $company
                ->getBrand()
                ->getMaxDailyUsageNotificationTemplate();
        }

        $language = $company->getLanguage();

        if (
            $notificationTemplate
            && $notificationTemplate->getContentsByLanguage($language)
        ) {
            return $notificationTemplate;
        }

        /** @var NotificationTemplateInterface $response */
        $response = $this->findOneBy([
            'brand' => null,
            'type' => 'maxDailyUsage'
        ]);

        return $response;
    }

    public function findVoicemailTemplateByCompany(
        CompanyInterface $company,
        LanguageInterface $language
    ): NotificationTemplateInterface {
        // Get Company Notification Template for voicemails
        $notificationTemplate = $company->getVoicemailNotificationTemplate();
        if ($notificationTemplate) {
            if ($notificationTemplate->getContentsByLanguage($language)) {
                return $notificationTemplate;
            }
        }

        // If company has no template associated, fallback to brand notification template for voicemails
        $notificationTemplate = $company->getBrand()->getVoicemailNotificationTemplate();
        if ($notificationTemplate) {
            if ($notificationTemplate->getContentsByLanguage($language)) {
                return $notificationTemplate;
            }
        }

        // use generic notification template
        /** @var NotificationTemplateInterface $response */
        $response = $this->findOneBy([
            'brand' => null,
            'type' => 'voicemail'
        ]);

        return $response;
    }

    public function findTemplateByBalanceNotification(
        BalanceNotificationInterface $balanceNotification,
        LanguageInterface $language
    ): NotificationTemplateInterface {
        $notificationTemplate = $balanceNotification->getNotificationTemplate();
        if ($notificationTemplate) {
            // make sure we've contents for required language,
            if ($notificationTemplate->getContentsByLanguage($language)) {
                return $notificationTemplate;
            }
        }

        // return default notification template
        /** @var NotificationTemplateInterface $response */
        $response = $this->findOneBy([
            'brand' => null,
            'type' => 'lowbalance'
        ]);

        return $response;
    }
}

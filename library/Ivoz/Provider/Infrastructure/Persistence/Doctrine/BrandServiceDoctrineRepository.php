<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Provider\Domain\Model\Brand\BrandInterface;
use Ivoz\Provider\Domain\Model\BrandService\BrandService;
use Ivoz\Provider\Domain\Model\BrandService\BrandServiceInterface;
use Ivoz\Provider\Domain\Model\BrandService\BrandServiceRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * BrandServiceDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @template-extends ServiceEntityRepository<BrandService>
 */
class BrandServiceDoctrineRepository extends ServiceEntityRepository implements BrandServiceRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, BrandService::class);
    }

    /**
     * @param BrandInterface $brand
     * @param string $iden
     * @return BrandInterface
     */
    public function findByIden(BrandInterface $brand, string $iden)
    {
        $qb = $this->createQueryBuilder('self');
        $query = $qb
            ->select('self')
            ->innerJoin('self.service', 'service')
            ->where(
                $qb->expr()->eq('self.brand', $brand->getId())
            )
            ->andWhere(
                $qb->expr()->eq('service.iden', "'$iden'")
            )
            ->getQuery();

        $result = $query->getResult();
        return array_shift($result);
    }

    /**
     * @param int $id
     * @return BrandServiceInterface[]
     */
    public function findByBrandId($id): array
    {
        return $this->findBy([
            'brand' => $id
        ]);
    }

    /**
     * Used by client API access controls
     * @return int[]
     */
    public function getServiceIdsByBrand(int $brandId): array
    {
        $qb = $this->createQueryBuilder('self');
        $expression = $qb->expr();

        $qb
            ->select('IDENTITY(self.service) AS service')
            ->where(
                $expression->eq('self.brand', $brandId)
            );

        $result = $qb->getQuery()->getScalarResult();

        return array_map(
            'intval',
            array_column($result, 'service')
        );
    }
}

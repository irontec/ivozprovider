<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\ORM\QueryBuilder;
use Doctrine\Persistence\ManagerRegistry;
use Ivoz\Core\Infrastructure\Domain\Service\DoctrineQueryRunner;
use Ivoz\Core\Infrastructure\Persistence\Doctrine\Model\Helper\CriteriaHelper;
use Ivoz\Provider\Domain\Model\Administrator\AdministratorInterface;
use Ivoz\Provider\Domain\Model\AdministratorRelPublicEntity\AdministratorRelPublicEntity;
use Ivoz\Provider\Domain\Model\AdministratorRelPublicEntity\AdministratorRelPublicEntityInterface;
use Ivoz\Provider\Domain\Model\AdministratorRelPublicEntity\AdministratorRelPublicEntityRepository;

/**
 * AdministratorRelPublicEntityDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @template-extends ServiceEntityRepository<AdministratorRelPublicEntity>
 */
class AdministratorRelPublicEntityDoctrineRepository extends ServiceEntityRepository implements AdministratorRelPublicEntityRepository
{
    public function __construct(
        ManagerRegistry $registry,
        private DoctrineQueryRunner $queryRunner
    ) {
        parent::__construct($registry, AdministratorRelPublicEntity::class);
    }

    public function setWritePermissions(
        AdministratorInterface $administrator
    ): int {

        $qb = $this
            ->prepareUpdateQuery(
                true,
                true
            )
            ->where('self.administrator = :id')
            ->setParameter(':id', $administrator->getId());

        return $this->queryRunner->execute(
            $this->getEntityName(),
            $qb->getQuery()
        );
    }

    /**
     * @param int[] $ids
     */
    public function setWritePermissionsByIds(
        array $ids
    ): int {

        $qb = $this
            ->prepareUpdateQuery(
                true,
                true
            )
            ->where('self.id in (:ids)')
            ->setParameter(':ids', $ids);

        return $this->queryRunner->execute(
            $this->getEntityName(),
            $qb->getQuery()
        );
    }

    public function setReadOnlyPermissions(
        AdministratorInterface $administrator
    ): int {
        $qb = $this
            ->prepareUpdateQuery(
                true,
                false
            )
            ->where('self.administrator = :id')
            ->setParameter(':id', $administrator->getId());

        return $this->queryRunner->execute(
            $this->getEntityName(),
            $qb->getQuery()
        );
    }

    /**
     * @param int[] $ids
     */
    public function setReadOnlyPermissionsByIds(
        array $ids
    ): int {

        $qb = $this
            ->prepareUpdateQuery(
                true,
                false
            )
            ->where('self.id in (:ids)')
            ->setParameter(':ids', $ids);

        return $this->queryRunner->execute(
            $this->getEntityName(),
            $qb->getQuery()
        );
    }

    /**
     * @param int[] $publicEntitiesRelUserIds
     * @throws \Exception
     */
    public function grantReadOnlyPermissionsByAdministratorAndIds(
        int $adminId,
        array $publicEntitiesRelUserIds
    ): int {

        if (empty($publicEntitiesRelUserIds)) {
            return 0;
        }

        $qb = $this
            ->prepareUpdateQuery(
                true,
                false
            )
            ->where('self.publicEntity in (:publicEntities)')
            ->andWhere('self.administrator = :adminId')
            ->setParameter(':publicEntities', $publicEntitiesRelUserIds)
            ->setParameter(':adminId', $adminId);

        return $this->queryRunner->execute(
            $this->getEntityName(),
            $qb->getQuery()
        );
    }

    /**
     * @param int[] $publicEntitiesRelUserIds
     * @throws \Exception
     */
    public function grantAllPermissionsByAdministratorAndIds(
        int $adminId,
        array $publicEntitiesRelUserIds
    ): int {
        if (empty($publicEntitiesRelUserIds)) {
            return 0;
        }

        $qb = $this
            ->prepareUpdateQuery(
                true,
                true
            )
            ->where('self.publicEntity in (:publicEntities)')
            ->andWhere('self.administrator = :adminId')
            ->setParameter(':publicEntities', $publicEntitiesRelUserIds)
            ->setParameter(':adminId', $adminId);
        ;

        return $this->queryRunner->execute(
            $this->getEntityName(),
            $qb->getQuery()
        );
    }

    /**
     * @param int[] $publicEntitiesRelUserIds
     * @throws \Exception
     */
    public function revokeAllPermissionsByAdministratorAndIds(
        int $adminId,
        array $publicEntitiesRelUserIds
    ): int {

        if (empty($publicEntitiesRelUserIds)) {
            return 0;
        }

        $qb = $this
            ->prepareUpdateQuery(
                false,
                false
            )
            ->where('self.publicEntity in (:publicEntities)')
            ->andWhere('self.administrator = :adminId')
            ->setParameter(':publicEntities', $publicEntitiesRelUserIds)
            ->setParameter(':adminId', $adminId);
        ;

        return $this->queryRunner->execute(
            $this->getEntityName(),
            $qb->getQuery()
        );
    }

    /**
     * @param int[] $ids
     */
    public function revokePermissionsByIds(
        array $ids
    ): int {

        $qb = $this
            ->prepareUpdateQuery(
                false,
                false
            )
            ->where('self.id in (:ids)')
            ->setParameter(':ids', $ids);

        return $this->queryRunner->execute(
            $this->getEntityName(),
            $qb->getQuery()
        );
    }

    public function removeByAdministratorId(int $id): int
    {
        $qb = $this
            ->createQueryBuilder('self');

        $criteria = CriteriaHelper::fromArray([
            ['administrator', 'eq', $id]
        ]);

        $qb
            ->delete(
                $this->getEntityName(),
                'self'
            )
            ->addCriteria($criteria);

        return $this->queryRunner->execute(
            $this->getEntityName(),
            $qb->getQuery()
        );
    }

    /**
     * @return AdministratorRelPublicEntityInterface[]
     */
    public function getByAdministratorId(int $id): array
    {
        $qb = $this
            ->createQueryBuilder('self');
        $expr = $qb->expr();

        $qb
            ->select(
                'self, publicEntity'
            )
            ->innerJoin(
                'self.publicEntity',
                'publicEntity'
            )
            ->where(
                $expr->eq('self.administrator', $id)
            );

        return $qb->getQuery()->getResult();
    }

    private function prepareUpdateQuery(bool $read, bool $write): QueryBuilder
    {
        return $this
            ->createQueryBuilder('self')
            ->update($this->_entityName, 'self')
            ->set('self.create', ':writeValue')
            ->set('self.read', ':readValue')
            ->set('self.update', ':writeValue')
            ->set('self.delete', ':writeValue')
            ->setParameter(':writeValue', $write)
            ->setParameter(':readValue', $read);
    }
}

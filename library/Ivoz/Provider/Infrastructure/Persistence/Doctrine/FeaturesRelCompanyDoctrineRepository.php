<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Provider\Domain\Model\FeaturesRelCompany\FeaturesRelCompany;
use Ivoz\Provider\Domain\Model\FeaturesRelCompany\FeaturesRelCompanyInterface;
use Ivoz\Provider\Domain\Model\FeaturesRelCompany\FeaturesRelCompanyRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * FeaturesRelCompanyDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @template-extends ServiceEntityRepository<FeaturesRelCompany>
 */
class FeaturesRelCompanyDoctrineRepository extends ServiceEntityRepository implements FeaturesRelCompanyRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, FeaturesRelCompany::class);
    }

    /**
     * @return string[]
     */
    public function findFeatureIdensByCompanyId(int $companyId): array
    {
        $qb = $this->createQueryBuilder('self');
        $expr = $qb->expr();

        $qb
            ->select(
                'self, feature'
            )
            ->innerJoin(
                'self.feature',
                'feature'
            )
            ->where(
                $expr->eq('self.company', $companyId)
            );

        /** @var FeaturesRelCompanyInterface[] $response */
        $response = $qb
            ->getQuery()
            ->getResult();

        $features = array_map(
            fn (FeaturesRelCompanyInterface $featureRelCompany) => $featureRelCompany->getFeature()->getIden(),
            $response
        );

        return $features;
    }

    /**
     * @inheritdoc
     */
    public function isFeatureInUseByBrandId(int $brandId, int $featureId): bool
    {
        $qb = $this->createQueryBuilder('self');
        $expression = $qb->expr();

        $qb
            ->select('self, company')
            ->innerJoin('self.company', 'company')
            ->where(
                $expression->eq('company.brand', $brandId)
            )
            ->andWhere(
                $expression->eq('self.feature', $featureId)
            )
            ->setMaxResults(1);

        /** @var FeaturesRelCompanyInterface[] $result  */
        $result = $qb
            ->getQuery()
            ->getResult();

        return count($result) > 0;
    }
}

<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Core\Infrastructure\Persistence\Doctrine\Model\Helper\CriteriaHelper;
use Ivoz\Provider\Domain\Model\Domain\DomainInterface;
use Ivoz\Provider\Domain\Model\ResidentialDevice\ResidentialDevice;
use Ivoz\Provider\Domain\Model\ResidentialDevice\ResidentialDeviceInterface;
use Ivoz\Provider\Domain\Model\ResidentialDevice\ResidentialDeviceRepository;
use Ivoz\Provider\Infrastructure\Persistence\Doctrine\Traits\CountByCriteriaTrait;
use Doctrine\Persistence\ManagerRegistry;

/**
 * ResidentialDeviceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @template-extends ServiceEntityRepository<ResidentialDevice>
 */
class ResidentialDeviceDoctrineRepository extends ServiceEntityRepository implements ResidentialDeviceRepository
{
    use CountByCriteriaTrait;

    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, ResidentialDevice::class);
    }

    /**
     * @inheritdoc
     */
    public function findOneByNameAndDomain(string $name, DomainInterface $domain)
    {
        /** @var ResidentialDeviceInterface $response */
        $response = $this->findOneBy([
            "name" => $name,
            "domain" => $domain
        ]);

        return $response;
    }

    /**
     * @param int $companyId
     * @return string[]
     */
    public function findNamesByCompanyId(int $companyId): array
    {
        $qb = $this->createQueryBuilder('self');
        $expression = $qb->expr();

        $qb
            ->select('self.name')
            ->where(
                $expression->eq('self.company', $companyId)
            );

        $result = $qb
            ->getQuery()
            ->getScalarResult();

        return array_column(
            $result,
            'name'
        );
    }

    /**
     * @param int[] $companyIds
     */
    public function countRegistrableDevicesByCompanies(array $companyIds): int
    {
        $criteria = CriteriaHelper::fromArray([
            ['company', 'in', $companyIds],
            ['directConnectivity', 'eq', ResidentialDeviceInterface::DIRECTCONNECTIVITY_NO],
        ]);

        return $this->countByCriteria($criteria);
    }

    /**
     * @param array<string, mixed> $criteria
     */
    public function count(array $criteria): int
    {
        return parent::count($criteria);
    }

    public function findLastAddedByCompanyId(int $companyId): array
    {
        $qb = $this->createQueryBuilder('self');

        $result = $qb
            ->select('self, outgoingDdi')
            ->leftJoin('self.outgoingDdi', 'outgoingDdi')
            ->where('self.company=:company')
            ->orderBy('self.id', 'ASC')
            ->setMaxResults(4)
            ->setParameter('company', $companyId)
            ->getQuery()
            ->getResult();


        return $result;
    }
}

<?php

namespace Ivoz\Provider\Infrastructure\Persistence\Doctrine;

use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Ivoz\Provider\Domain\Model\Extension\Extension;
use Ivoz\Provider\Domain\Model\Extension\ExtensionInterface;
use Ivoz\Provider\Domain\Model\Extension\ExtensionRepository;
use Doctrine\Persistence\ManagerRegistry;

use function PHPUnit\Framework\isNull;

/**
 * ExtensionDoctrineRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @template-extends ServiceEntityRepository<Extension>
 */
class ExtensionDoctrineRepository extends ServiceEntityRepository implements ExtensionRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, Extension::class);
    }

    /**
     * @param int $id
     * @return ExtensionInterface[]
     */
    public function findByCompanyId($id)
    {
        /** @var ExtensionInterface[] $response */
        $response = $this->findBy([
            'company' => $id
        ]);

        return $response;
    }

    /**
     * @return ExtensionInterface | null
     */
    public function findCompanyExtension(int $companyId, string $extensionNumber)
    {
        /** @var ExtensionInterface | null $response */
        $response = $this->findOneBy([
            'company' => $companyId,
            'number' => $extensionNumber
        ]);

        return $response;
    }

    /**
     * @param int[] $includeIds
     * @return ExtensionInterface[]
     */
    public function findUnassignedByCompanyId(
        int $companyId,
        ?array $includeIds,
        ?int $userId
    ): array {
        $qb = $this->createQueryBuilder('self');
        $expression = $qb->expr();

        $andXExpressions = $expression->andX();

        if ($userId !== null) {
            $andXExpressions->add($expression->eq('self.routeType', ':routeType'));
            $andXExpressions->add($expression->eq('self.user', ':userId'));
        }

        $unassignedExtensionsCondition = [
            $andXExpressions,
            $expression->isNull('self.routeType')
        ];


        if (!empty($includeIds)) {
            $unassignedExtensionsCondition[] = $expression->in('self.id', $includeIds);
        }

        $finalCondition = $expression->orX(...$unassignedExtensionsCondition);

        $qb
            ->where($expression->eq('self.company', ':companyId'))
            ->andWhere($finalCondition)
            ->setParameter('companyId', $companyId);

        if ($userId !== null) {
            $qb
                ->setParameter('userId', $userId)
                ->setParameter('routeType', 'user');
        }

        $query = $qb->getQuery();

        return $query->getResult();
    }

    /**
     * @param array<string, mixed> $criteria
     */
    public function count(array $criteria): int
    {
        return parent::count($criteria);
    }
}

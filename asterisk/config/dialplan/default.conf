;;---------------------------------------------------------------------------------------------------
;;------------------------------------[       General         ]--------------------------------------
;;---------------------------------------------------------------------------------------------------
;; Context for external calls (from proxyTrunks).
;; ${EXTEN} must always match a configured DDI number
[trunks]
exten => _[+*0-9]!,1,NoOp(Incoming external call from ${CALLERID(all)} to ${EXTEN})
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/Trunks)
; Playback specific sounds and leave
include => sounds

;; Context for user calls (from proxyUsers)
;; ${EXTEN} may match a Company Extension, Company Service or External number
[users]
exten => _[+*0-9]!,1,NoOp(Outgoing call from user ${CALLERID(all)} to ${EXTEN})
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/Users)
; Playback specific sounds and leave
include => sounds

;; Context for friends calls (aka friendly trunks)
[friends]
exten => _[+*0-9]!,1,NoOp(Outgoing call from friend ${CALLERID(all)} to ${EXTEN})
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/Friends)
; Playback specific sounds and leave
include => sounds

;; Context for residential devices
[residential]
exten => _[+*0-9]!,1,NoOp(Outgoing call from residential device ${CALLERID(all)} to ${EXTEN})
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/Residentials)
; Playback specific sounds and leave
include => sounds

;; Context for retail accounts (CFW calls only)
[retail]
exten => _[+*0-9]!,1,NoOp(Outgoing call from retail account ${CALLERID(all)} to ${EXTEN})
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/Retails)
; Playback specific sounds and leave
include => sounds

;; Context for calls from queues
[queues]
exten => _[+*0-9]!,1,NoOp(Call from queue ${QUEUE} to extension ${EXTEN})
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/Queues)
    same => n,Dial(${DIAL_DST},${DIAL_TIMEOUT},${DIAL_DEF_OPTS}${DIAL_OPTS}b(add-headers-users^${EXTEN}^1))

;;---------------------------------------------------------------------------------------------------
;;------------------------------------[     Dial Contexts     ]--------------------------------------
;;---------------------------------------------------------------------------------------------------
;; Context for calling a user (and handle User call forwards after the call)
[call-user-cfw]
exten => _[+*0-9]!,1,NoOp(Calling from ${CALLERID(all)} to ${DIAL_DST})
    same => n,Dial(${DIAL_DST},${DIAL_TIMEOUT},${DIAL_DEF_OPTS}${DIAL_OPTS}b(add-headers-users^${EXTEN}^1)L(${MAX_DURATION}))
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/UserStatus)

[call-user]
exten => _[+*0-9]!,1,NoOp(Calling from ${CALLERID(all)} to ${DIAL_DST})
    same => n,Dial(${DIAL_DST},${DIAL_TIMEOUT},${DIAL_DEF_OPTS}${DIAL_OPTS}b(add-headers-users^${EXTEN}^1)L(${MAX_DURATION}))

;; Context for Calling an external number through a trunk proxy
[call-world]
exten => _[+*0-9]!,1,NoOp(Calling external number)
    same => n,Dial(${DIAL_DST},${DIAL_TIMEOUT},${DIAL_DEF_OPTS}${DIAL_OPTS}ib(add-headers-trunks^${EXTEN}^1)L(${MAX_DURATION}))

;; Context for Reading user IVR pressed digits
[call-ivr-pressed]
exten => _[+*0-9]!,1,NoOp(Reading digits for IVR ${IVR_NAME})
    same => n,Read(IVR_PRESSED,${IVR_LOCUTION},${IVR_MAXDIGITS},,,${IVR_TIMEOUT})
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/IvrStatus)

;; Context for Calling a user from an IVR (and handle IVR Noanswer call forwards)
[call-ivr]
exten => _[+*0-9]!,1,NoOp(Calling from IVR to ${DIAL_DST})
    same => n,Dial(${DIAL_DST},${DIAL_TIMEOUT},gb(add-headers-users^${EXTEN}^1))

;; Context for Calling HuntGroup members (and handle HuntGroup post-process or continues)
[call-huntgroup]
exten => _[+*0-9]!,1,NoOp(Calling huntgroup)
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/HuntGroups)
    same => n,Dial(${DIAL_DST},${DIAL_TIMEOUT},${DIAL_DEF_OPTS}${DIAL_OPTS})
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/HuntGroupStatus)

;; Context for Calling HuntGroup members (simple huntgroups)
[call-huntgroup-simple]
exten => _[+*0-9]!,1,NoOp(Calling simple huntgroup)
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/HuntGroups)
    same => n,Dial(${DIAL_DST},${DIAL_TIMEOUT},${DIAL_DEF_OPTS}${DIAL_OPTS}gb(add-headers-users^${EXTEN}^1)L(${MAX_DURATION}))
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/HuntGroupStatus)

[call-huntgroup-member]
exten => _[0-9]!,1,NoOp(Calling huntgroup member ${EXTEN})
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/HuntGroupMember)

;; Context for entering a Conference Room
[call-conference]
exten => _[+*0-9]!,1,NoOp(Calling conference room ${EXTEN})
    same => n,ConfBridge(${EXTEN})

;; Context for calling through a friendly trunk
[call-friend]
exten => _[+*0-9]!,1,NoOp(Calling ${EXTEN} through ${DIAL_ENDPOINT})
    same => n,Dial(${DIAL_DST},${DIAL_TIMEOUT},${DIAL_DEF_OPTS}${DIAL_OPTS}b(add-headers-users^${EXTEN}^1)L(${MAX_DURATION}))
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/FriendStatus)

;; Context for calling a queue
[call-queue]
exten => _[+*0-9]!,1,NoOp(Calling to ${QUEUE})
    same => n,Answer
    same => n,Queue(${QUEUE},${QUEUE_OPTS},,,${QUEUE_TIMEOUT})
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/QueueStatus)

;; Context for calling through a residential device
[call-residential]
exten => _[+*0-9]!,1,NoOp(Calling ${EXTEN} through ${DIAL_ENDPOINT})
    same => n,Dial(${DIAL_DST},${DIAL_TIMEOUT},${DIAL_DEF_OPTS}${DIAL_OPTS}b(add-headers-users^${EXTEN}^1)L(${MAX_DURATION}))
    same => n,AGI(agi://${FASTAGI_SERVER}/fastagi-runner.php?command=Dialplan/ResidentialStatus)

;; Context for calling to a retail account
[call-retail]
exten => _[+*0-9]!,1,NoOp(Calling ${DIAL_ENDPOINT})
    same => n,Dial(${DIAL_DST},${DIAL_TIMEOUT},${DIAL_DEF_OPTS}${DIAL_OPTS}b(add-headers-users^${EXTEN}^1)L(${MAX_DURATION}))

;; Context for leaving a user voicemail
[call-voicemail]
exten => _[+*0-9]!,1,NoOp(Calling from ${CALLERID(all)} to Voicemail ${VOICEMAIL_MAILBOX})
    same => n,VoiceMail(${VOICEMAIL_MAILBOX},${VOICEMAIL_OPTS})

;; Context for checking voicemail service
[check-voicemail]
exten => _[+*0-9]!,1,NoOp(${CALLERID(all)} is checking Voicemail ${VOICEMAIL_MAILBOX})
    same => n,VoiceMailMain(${VOICEMAIL_MAILBOX},${VOICEMAIL_OPTS})

;;---------------------------------------------------------------------------------------------------
;;------------------------------------[      Subroutines      ]--------------------------------------
;;---------------------------------------------------------------------------------------------------
;; Subroutine for adding SIP headers on all outgoing channels
[add-headers-users]
exten => _[+*0-9]!.,1,NoOp(Adding Headers for internal call before placing call)
    same => n,Set(EXTENSION=${PJSIP_ENDPOINT(${CHANNEL(endpoint)},@extension)})
    same => n,ExecIf($[${LEN(${EXTENSION})} = 0]?Set(EXTENSION=${EXTEN}))
    same => n,Set(PJSIP_HEADER(add,X-Call-Id)=${CALL_ID})
    same => n,Set(PJSIP_HEADER(add,X-Info-BrandId)=${BRANDID})
    same => n,Set(PJSIP_HEADER(add,X-Info-CompanyId)=${COMPANYID})
    same => n,Set(PJSIP_HEADER(add,X-Info-Type)=${COMPANYTYPE})
    same => n,Set(PJSIP_HEADER(add,X-Info-Callee)=${EXTENSION})
    same => n,ExecIf($[${LEN(${RECORD})}]?Set(PJSIP_HEADER(add,X-Info-Record)=${RECORD}))
    same => n,ExecIf($[${LEN(${CHANNEL(namedpickupgroup)})}]?Set(CHANNEL(namedcallgroup)=${CHANNEL(namedpickupgroup)}))
    same => n,ExecIf($[${LEN(${ONDEMANDCODE})}]?Set(FEATUREMAP(automixmon)=${ONDEMANDCODE}))
    same => n,Return

[add-headers-trunks]
exten => _[+*0-9]!.,1,NoOp(Adding Headers for external call before placing call)
    same => n,Set(PJSIP_HEADER(add,X-Call-Id)=${CALL_ID})
    same => n,Set(PJSIP_HEADER(add,X-Info-BrandId)=${BRANDID})
    same => n,Set(PJSIP_HEADER(add,X-Info-CompanyId)=${COMPANYID})
    same => n,Set(PJSIP_HEADER(add,X-Info-Type)=${COMPANYTYPE})
    same => n,ExecIf($[${LEN(${RECORD})}]?Set(PJSIP_HEADER(add,X-Info-Record)=${RECORD}))
    same => n,ExecIf($[${LEN(${RESIDENTIALDEVICEID})}]?Set(PJSIP_HEADER(add,X-Info-ResidentialDeviceId)=${RESIDENTIALDEVICEID}))
    same => n,ExecIf($[${LEN(${RETAILACCOUNTID})}]?Set(PJSIP_HEADER(add,X-Info-RetailAccountId)=${RETAILACCOUNTID}))
    same => n,ExecIf($[${LEN(${USERID})}]?Set(PJSIP_HEADER(add,X-Info-UserId)=${USERID}))
    same => n,ExecIf($[${LEN(${FRIENDID})}]?Set(PJSIP_HEADER(add,X-Info-FriendId)=${FRIENDID}))
    same => n,ExecIf($[${LEN(${FAXID})}]?Set(PJSIP_HEADER(add,X-Info-FaxId)=${FAXID}))
    same => n,ExecIf($[${LEN(${DDIID})}]?Set(PJSIP_HEADER(add,X-Info-DdiId)=${DDIID}))
    same => n,ExecIf($[${LEN(${FAXFILE_ID})} & ${LEN(${T38PASSTHROUGH})}]?Set(PJSIP_HEADER(add,X-Info-Special)=fax))
    same => n,Return

[demand-record]
exten => s,1,Playback(beep)
    same => n,SendText(on-demand-record)
    same => n,Return

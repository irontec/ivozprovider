<?php

namespace Agi\Action;
use \IvozProvider\Model\Features;

/**
 * @class ExternalFriendCallAction
 *
 * @brief Manage outgoing external calls generated by a friendly trunk
 *
 */
class ExternalFriendCallAction extends ExternalCallAction
{
    protected $_number;

    public function setDestination($number)
    {
        $this->_number = $number;
        return $this;
    }

    public function process()
    {
        // Local variables
        $friend = $this->_caller;
        $number = $this->_number;

        // Get company from the caller
        $company = $friend->getCompany();

        // Some feedback for asterisk cli
        $this->agi->notice("Processing External call from \e[0;36m%s [friend%d]\e[0;93m to %s",
            $friend->getName(), $friend->getId(), $number);

        // Check if dialed number has company's outbound prefix
        if (!$this->checkCompanyOutboundPrefix($number)) {
            $this->agi->error("Destination number %s without [company%d] outbound prefix",
                            $number, $company->getId());
            $this->agi->decline();
            return;
        }

        // Convert to E.164 format
        $e164number = $friend->preferredToE164($number);

        // Check the user has this call allowed in its ACL
        if (!$friend->isAllowedToCall($e164number)) {
            $this->agi->error("User is not allowed to call %s", $e164number);
            // Play error notification over progress
            if ($company->hasFeature(Features::PROGRESS)) {
                $this->agi->progress("ivozprovider/notAllowed");
            }
            $this->agi->decline();
            return;
        }

        // Check if outgoing call can be tarificated
        if (!$this->checkTarificable($e164number)) {
            $this->agi->error("Destination %s can not be billed.", $e164number);
            // Play error notification over progress
            if ($company->hasFeature(Features::PROGRESS)) {
                $this->agi->progress("ivozprovider/notBillable");
            }
            $this->agi->decline();
            return;
        }

        // Outgoing presentation
        $ddi = $friend->getOutgoingDDI();

        // Update caller displayed number
        if (!$ddi) {
            $this->agi->error("Friend %s [friend%d] has not OutgoingDDI configured",  $friend->getName(), $friend->getId());
            $this->agi->decline();
            return;
        } else {
            $this->agi->setCallerIdNum($ddi->getDDIE164());
        }

        // Check if DDI has recordings enabled
        $this->checkDDIRecording($ddi);
        // Check if DDI belong to platform
        $this->checkDDIBounced($e164number);


        // Call the PSJIP endpoint
        $this->agi->setVariable("DIAL_DST", "PJSIP/" . $e164number . '@proxytrunks');
        $this->agi->setVariable("DIAL_OPTS", "");
        $this->agi->redirect('call-world', $e164number);
    }
}
